# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'uiProcessImg.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import tkinter
from turtle import width
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog,QVBoxLayout,QFormLayout,QLineEdit,QDialogButtonBox,QDialog,QApplication
from PyQt5.QtGui import QImage
import cv2, imutils
import numpy as np
import cv2
import numpy as np
import tkinter as tk
from tkinter import Entry, Button
from PIL import Image

# from test import click_event

# from test import click_event

class Dialog(QDialog):

    def __init__(self, parent=None):
        super().__init__(parent)
        dlgLayout = QVBoxLayout()

        self.formLayout = QFormLayout()
        self.entry1 = QLineEdit()
        self.formLayout.addRow("Nhập giá trị c:", self.entry1)

        dlgLayout.addLayout(self.formLayout)

        btns = QDialogButtonBox()
        btns.setStandardButtons(QDialogButtonBox.Ok)
        dlgLayout.addWidget(btns)
        self.setLayout(dlgLayout)

        btns.accepted.connect(self.accept)

    def accept(self):
        text_c = self.entry1.text()
        # Kiểm tra xem text_c có giá trị hợp lệ không, ví dụ: kiểm tra xem nó có phải là một số hay không.
        try:
            c = float(text_c)  # Chuyển đổi văn bản thành số (float)
        except ValueError:
            # Xử lý trường hợp không phải là số (hoặc xử lý lỗi khác nếu cần)
            print("Giá trị không hợp lệ")
            return

        # Gọi hàm inputLog với giá trị c
        ui.inputLog(c)
        self.close()
class Ui_MainWindow(object):
    #----------------------------------------------------------------------
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Cửa sổ ảnh")
        MainWindow.resize(400,700)
        self.window_name = "MainWindow"
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setText("                                                                                                  NHẬP ẢNH")
        # self.label.setPixmap(QtGui.QPixmap("img/R.jpg"))
        self.label.setStyleSheet("background-color: white; border: 1px solid black;")
        self.label.setObjectName("label")

        self.horizontalLayout_3.addWidget(self.label)
      
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")

    #-------------------------------------------------------------------------------------------------------

        self.verticalSlider_3 = QtWidgets.QSlider(self.centralwidget)
        self.verticalSlider_3.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_3.setObjectName("verticalSlider_3")
        self.horizontalLayout.addWidget(self.verticalSlider_3)

        self.verticalSlider_2 = QtWidgets.QSlider(self.centralwidget)
        self.verticalSlider_2.setOrientation(QtCore.Qt.Vertical)
        self.verticalSlider_2.setObjectName("verticalSlider_2")
        self.horizontalLayout.addWidget(self.verticalSlider_2)
        #-------------------------------------------------------------------------------------------------------------

        self.horizontalLayout_3.addLayout(self.horizontalLayout)
        self.gridLayout.addLayout(self.horizontalLayout_3,0, 0, 1, 2)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        
        # -----------------------------------button----------------------------------------------------------------------------------

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_4.addWidget(self.pushButton_2)
        self.pushButton_2.setStyleSheet("background-color: lightyellow;")
        

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_4.addWidget(self.pushButton)
        self.pushButton.setStyleSheet("background-color: lightyellow")

        # self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton_3.setObjectName("pushButton_3")
        # self.horizontalLayout_2.addWidget(self.pushButton_3)
        # self.pushButton_3.setStyleSheet("background-color: lightyellow")

        # self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton_4.setObjectName("pushButton_4")
        # self.horizontalLayout_2.addWidget(self.pushButton_4)
        # self.pushButton_4.setStyleSheet("background-color: lightyellow")
        
        # self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton_5.setObjectName("pushButton_5")
        # self.horizontalLayout_2.addWidget(self.pushButton_5)
        # self.pushButton_5.setStyleSheet("background-color: lightyellow")

        # self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton_6.setObjectName("pushButton_6")
        # self.horizontalLayout_2.addWidget(self.pushButton_6)
        # self.pushButton_6.setStyleSheet("background-color: lightyellow")

        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setObjectName("pushButton_7")
        self.horizontalLayout_2.addWidget(self.pushButton_7)
        self.pushButton_7.setStyleSheet("background-color: lightyellow")

        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setObjectName("pushButton_8")
        self.horizontalLayout_2.addWidget(self.pushButton_8)
        self.pushButton_8.setStyleSheet("background-color: lightyellow")

        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setObjectName("pushButton_9")
        self.horizontalLayout_2.addWidget(self.pushButton_9)
        self.pushButton_9.setStyleSheet("background-color: lightyellow")

        # self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        # self.pushButton_10.setObjectName("pushButton_10")
        # self.horizontalLayout_2.addWidget(self.pushButton_10)
        # self.pushButton_10.setStyleSheet("background-color: lightyellow")
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setObjectName("pushButton_10")
        self.horizontalLayout_2.addWidget(self.pushButton_10)
        self.pushButton_10.setStyleSheet("background-color: lightyellow")

        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setObjectName("pushButton_11")
        self.horizontalLayout_2.addWidget(self.pushButton_11)
        self.pushButton_11.setStyleSheet("background-color: lightyellow")

        self.pushButton_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_12.setObjectName("pushButton_12")
        self.horizontalLayout_2.addWidget(self.pushButton_12)
        self.pushButton_12.setStyleSheet("background-color: lightyellow")

        self.pushButton_13 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_13.setObjectName("pushButton_13")
        self.horizontalLayout_2.addWidget(self.pushButton_13)
        self.pushButton_13.setStyleSheet("background-color: lightyellow")
        
        self.pushButton_14 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_14.setObjectName("pushButton_14")
        self.horizontalLayout_2.addWidget(self.pushButton_14)
        self.pushButton_14.setStyleSheet("background-color: lightyellow")

        self.pushButton_15 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_15.setObjectName("pushButton_15")
        self.horizontalLayout_2.addWidget(self.pushButton_15)
        self.pushButton_15.setStyleSheet("background-color: lightyellow")

        self.pushButton_16 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_16.setObjectName("pushButton_16")
        self.horizontalLayout_2.addWidget(self.pushButton_16)
        self.pushButton_16.setStyleSheet("background-color: lightyellow")

        self.pushButton_17 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_17.setObjectName("pushButton_17")
        self.horizontalLayout_2.addWidget(self.pushButton_17)
        self.pushButton_17.setStyleSheet("background-color: lightyellow")

        self.pushButton_18 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_18.setObjectName("pushButton_18")
        self.horizontalLayout_2.addWidget(self.pushButton_18)
        self.pushButton_18.setStyleSheet("background-color: lightyellow")

        self.pushButton_19 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_19.setObjectName("pushButton_19")
        self.horizontalLayout_2.addWidget(self.pushButton_19)
        self.pushButton_19.setStyleSheet("background-color: lightyellow")

        self.pushButton_20 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_20.setObjectName("pushButton_20")
        self.horizontalLayout_2.addWidget(self.pushButton_20)
        self.pushButton_20.setStyleSheet("background-color: lightyellow")


        
        

        #----------------------------------het phan button -------------------------------------------------------

        self.gridLayout.addLayout(self.horizontalLayout_2, 1, 0, 1, 1)
        self.gridLayout.addLayout(self.horizontalLayout_4, 2, 0, 2, 2)
        
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 1, 1, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
    #--------------------------------------sap xep layout -------------------------------------------------------------

        self.retranslateUi(MainWindow)
        self.pushButton_2.clicked.connect(self.loadImage) 
        # self.pushButton_3.clicked.connect(self.resizeActive) 
        self.pushButton.clicked.connect(self.savePhoto) 
        # self.pushButton_4.clicked.connect(self.cropActive) 
        # self.pushButton_6.clicked.connect(self.turnRightActive) 
        # self.pushButton_5.clicked.connect(self.turnLeftActive)
        self.pushButton_7.clicked.connect(self.gaussActive)
        self.pushButton_8.clicked.connect(self.noiseActive)
        # self.pushButton_9.clicked.connect(self.contrastActive)
        self.pushButton_9.clicked.connect(self.thresholdingActive)
        # self.pushButton_10.clicked.connect(self.sharpenActive)
        self.pushButton_10.clicked.connect(self.ambanActive)
        self.pushButton_11.clicked.connect(self.defaultActive)
        self.pushButton_12.clicked.connect(self.logActive)
        self.pushButton_13.clicked.connect(self.hammuActive)
        self.pushButton_14.clicked.connect(self.medianActive)
        self.pushButton_15.clicked.connect(self.averageActive)
        self.pushButton_16.clicked.connect(self.sobelActive)
        self.pushButton_17.clicked.connect(self.cannyActive)
        self.pushButton_18.clicked.connect(self.LOGActive)
        self.pushButton_19.clicked.connect(self.growActive)
        self.pushButton_20.clicked.connect(self.segmenActive)
       
    
        
#-----------------------------------------------click --------------------------------------------------
        self.verticalSlider_3.valueChanged['int'].connect(self.brightness_value)
        self.verticalSlider_2.valueChanged['int'].connect(self.blur_value)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
#----------------------------------kéo thả  ----------------------------------------------------------    
    # Add code here
        self.fileName = None    # Tổ chức vị trí địa chỉ của ảnh
        self.tmp = None         # Ảnh tạm thời để trưng bày
        self.bright_value_now = 0   # Cập nhật giá trị độ sáng
        self.blur_value_now = 0     # Cập nhật giá trị độ mờ
        self.angle_value = 0
        self.img_changed = None
        self.default = None

    #--------------------------------------------------------------------setup------------------------------\
    
    def loadImage(self):
        self.fileName = QFileDialog.getOpenFileName(filter="Image (*.*)")[0]
        self.image = cv2.imread(self.fileName)
        # self.image = cv2.resize(self.image,dsize=(900,600))
        self.setPhoto(self.image)
        self.bright_value_now = 0   # Cập nhật giá trị độ sáng
        self.blur_value_now = 0   # Cập nhật giá trị độ mờ
        self.angle_value = 0  
        self.img_changed = self.image
        self.default = self.image
        self.setDefault = self.image
        self.checkBright =1

    #------------------------------------------------------------------load anh -------------------

    def gauss(self,img):
        img_canny = cv2.Canny(img,80,80)
        return img_canny
    def gaussActive(self):
        img = self.gauss(self.img_changed)
        self.default = self.gauss(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)
        self.checkBright = 0
    #-------------------------------------------------loggggggggggg--------------------------------------------
     
    def log(self,img,c):
        
        
        # Thực hiện biến đổi logarit
        output_image = int(c) * np.log(1 + img)
        # Chuyển đổi dạng số liệu về định dạng uint8 (8-bit)
        output_image = np.uint8(output_image)
        return  output_image
    def logActive(self):
        dlg.show()
    def inputLog(self,c):
        img = self.log(self.img_changed,c)
        self.default = self.log(self.default,c)
        self.img_changed = img
        self.setPhoto(self.img_changed)
 #--------------------------------------------Bien doi am ban-------------------------------------------------------
    def Amban(self,img):
        
        height, width, channels = img.shape

    # Tạo một mảng trống để lưu hình ảnh biến đổi
        inverted_image = np.zeros((height, width, channels), dtype=np.uint8)

    # Thực hiện biến đổi âm bản
        for i in range(height):
           for j in range(width):
                for k in range(channels):
                    inverted_image[i, j, k] = 255 - img[i, j, k]
        return inverted_image
    def ambanActive(self):
        img = self.Amban(self.img_changed)
        self.default = self.Amban(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)
    
    #-------------------------------------------------------Phân ngưỡng-----------------------------------
    def thresholding(self, img):
        threshold_value=88
        thresholded_img = img.copy()

        # Đặt tất cả các giá trị pixel lớn hơn hoặc bằng ngưỡng thành 255 (trắng)
        thresholded_img[thresholded_img >= threshold_value] = 255

        # Đặt tất cả các giá trị pixel nhỏ hơn ngưỡng thành 0 (đen)
        thresholded_img[thresholded_img < threshold_value] = 0
        return thresholded_img
    def thresholdingActive(self):
        img = self.thresholding(self.img_changed)
        self.default = self.thresholding(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)
        self.checkBright = 0

    #..................................................bien doi ham mu...........................................
    def hammu(self, img):
        c = 1.0  # Hệ số
        gamma = 1.1 # Bậc của hàm mũ
        r = 0  # Dịch chuyển
        # Chuyển ảnh đầu vào thành mảng NumPy
        img_array = np.array(img, dtype=np.float32)
        # Thực hiện biến đổi hàm mũ
        transformed_img = c * np.power(img_array, gamma) + 0
        # Giới hạn giá trị của pixel trong khoảng 0 đến 255
        transformed_img = np.clip(transformed_img, 0, 255)
        # Chuyển về định dạng uint8 để hiển thị ảnh
        transformed_img = transformed_img.astype(np.uint8)
        return transformed_img

    def hammuActive(self):
        img = self.hammu(self.img_changed)
        self.default = self.hammu(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)
        self.checkBright = 0
    #-------------------------------------------lọc trung vị-------------------------------------------
    def median_filter(self, img):
        filter_size = 3
        median_filtered_img = cv2.medianBlur(img, filter_size)

        return median_filtered_img

    def medianActive(self):
        img = self.median_filter(self.img_changed)
        self.default = self.median_filter(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)
        self.checkBright = 0


    #--------------------------------------------------------lọc trung bình------------------------------------
    
    def average_filter(self, img):
        filter_size=3
        blurred_image = cv2.blur(img, (filter_size, filter_size))
        return blurred_image
    def averageActive(self):
        img = self.average_filter(self.img_changed)
        self.default = self.average_filter(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)
        self.checkBright = 0

   #------------------------------------------sobel---------------------------------------
    def sobel_filter(self,img):
        # Chuyển ảnh sang ảnh đen trắng (grayscale)
        gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # Áp dụng bộ lọc Sobel
        sobelx = cv2.Sobel(gray_image, cv2.CV_64F, 1, 0, ksize=3)
        sobely = cv2.Sobel(gray_image, cv2.CV_64F, 0, 1, ksize=3)

        # Tính toán độ lớn của đạo hàm
        gradient_magnitude = np.sqrt(np.square(sobelx) + np.square(sobely))

        # Chuyển về định dạng uint8 để hiển thị
        gradient_magnitude = cv2.convertScaleAbs(gradient_magnitude)

        return gradient_magnitude
    def sobelActive(self):
        img = self.sobel_filter(self.img_changed)
        self.default = self.sobel_filter(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)
        self.checkBright = 0
    #------------------------------------------------canny----------------------------------

    def canny_edge_detection(self,img):
        low_threshold =50
        high_threshold=150
        # Chuyển ảnh sang ảnh đen trắng (grayscale)
        gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # Áp dụng phương pháp phát hiện biên với thuật toán Canny
        edges = cv2.Canny(gray_image, low_threshold, high_threshold)

        return edges
    def cannyActive(self):
        img = self.canny_edge_detection(self.img_changed)
        self.default = self.canny_edge_detection(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)
        self.checkBright = 0

    #--------------------------------------------LOG---------------------------------------------------------

    def LOG(self,img):
        sigma=1.5
        gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        blurred_image = cv2.GaussianBlur(gray_image, (5, 5), sigma)
        # Áp dụng phương pháp phát hiện biên bằng Laplacian of Gaussian (LOG)
        log_edges = cv2.Laplacian(blurred_image, cv2.CV_64F, ksize=5)
        # Chuyển về định dạng uint8 để hiển thị
        log_edges = cv2.convertScaleAbs(log_edges)

        return log_edges
    def LOGActive(self):
        img = self.LOG(self.img_changed)
        self.default = self.LOG(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)
        self.checkBright = 0

    #--------------------------------------------Phát triển vùng ------------------------------------------
    def region_growing(self,img):
        seed = (5,5)
        # Chuyển ảnh sang ảnh đen trắng (grayscale)
        gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # Khởi tạo ma trận kết quả với tất cả giá trị là 0
        result = np.zeros_like(gray_image)

        # Thiết lập ngưỡng cho việc triển vùng
        threshold = 50

        # Hàng và cột của điểm gốc (seed)
        seed_row, seed_col = seed

        # Hàng và cột tối thiểu và tối đa cho việc triển vùng
        min_row, max_row = 0, gray_image.shape[0]
        min_col, max_col = 0, gray_image.shape[1]

        # Stack để lưu trữ các điểm trong quá trình triển vùng
        stack = [(seed_row, seed_col)]

        # Xác định giá trị ngưỡng cho pixel gốc
        seed_value = gray_image[seed_row, seed_col]

        while stack:
            # Lấy điểm từ stack
            current_row, current_col = stack.pop()

            # Kiểm tra xem điểm có thuộc vùng không
            if (
                min_row <= current_row < max_row and
                min_col <= current_col < max_col and
                result[current_row, current_col] == 0 and
                abs(int(gray_image[current_row, current_col]) - int(seed_value)) < threshold
            ):
                # Gán giá trị cho điểm thuộc vùng
                result[current_row, current_col] = 255

                # Thêm các điểm xung quanh vào stack để kiểm tra
                stack.append((current_row + 1, current_col))
                stack.append((current_row - 1, current_col))
                stack.append((current_row, current_col + 1))
                stack.append((current_row, current_col - 1))
        return result
    
    def growActive(self):
        img = self.region_growing(self.img_changed)
        self.default = self.region_growing(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)

    #----------------------------------------Tách vùng-------------------------------------------------

    def region_segmentation(self,img):
        num_clusters = 3
        pixels = img.reshape((-1, 3))

        # Chuyển đổi kiểu dữ liệu sang float32
        pixels = np.float32(pixels)

        # Thực hiện k-means clustering
        criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.2)
        _, labels, centers = cv2.kmeans(pixels, num_clusters, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

        # Chuyển về kiểu dữ liệu uint8
        centers = np.uint8(centers)

        # Gán mỗi pixel vào một nhóm
        segmented_image = centers[labels.flatten()]

        # Chuyển về kích thước ảnh ban đầu
        segmented_image = segmented_image.reshape(img.shape)

        return segmented_image
    
    def segmenActive(self):
        img = self.region_segmentation(self.img_changed)
        self.default = self.region_segmentation(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)
        #-------------------------------------------------ve vien bang thuat toan gauss------------------------------------
  
    def Noise(self,img):
        blur = cv2.medianBlur(img,5)
        return blur
    def noiseActive(self):
        img = self.Noise(self.img_changed)
        self.default = self.Noise(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)

    # #------------------------------------------------khu noise------------------------------------
        
    
    def contrast(self,img):
        new_img=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        return new_img
    def contrastActive(self):
        img = self.contrast(self.img_changed)
        self.default = self.contrast(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)
        self.checkBright = 0

    #----------------------------trang den------------------------------------------------
    
    def sharpen(self,img):
        kernel3 = np.array([[0, -1,  0],
                           [-1,  5, -1],
                            [0, -1,  0]])
        sharp_img = cv2.filter2D(src=img, ddepth=-1, kernel=kernel3)
        return sharp_img
    def sharpenActive(self):
        img = self.sharpen(self.img_changed)
        self.default = self.sharpen(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)

    #-----------------------------làm nét-------------------------------------------
    
    def turnRightImage(self,img):
        height, width = img.shape[:2] # lấy kích thước chiều cao và chiều rộng của ảnh
        center = (width/2, height/2)
        self.angle_value = -90
        rotate_matrix = cv2.getRotationMatrix2D(center=center, angle=self.angle_value, scale=1)
        rotated_image = cv2.warpAffine(src=img, M=rotate_matrix, dsize=(width, height))
        return rotated_image
    def turnRightActive(self):
        img = self.turnRightImage(self.img_changed)
        self.default = self.turnRightImage(self.default)
       
        self.img_changed = img
        self.setPhoto(self.img_changed)

    #------------------------------------------------------quay anh trai qua phai--------------------------
    def turnLeftImage(self,img):
        height, width = img.shape[:2] # lấy kích thước chiều cao và chiều rộng của ảnh
        center = (width/2, height/2)
        self.angle_value = 90
        rotate_matrix = cv2.getRotationMatrix2D(center=center, angle=self.angle_value, scale=1)
        rotated_image = cv2.warpAffine(src=img, M=rotate_matrix, dsize=(width, height))
        return rotated_image
    def turnLeftActive(self):
        img = self.turnLeftImage(self.img_changed)
        self.default = self.turnLeftImage(self.default)
        self.img_changed = img
        self.setPhoto(self.img_changed)

    #-----------------------------------xoay anh phai qua trai -------------------------------------------
    # def cropImage(self,img):
    #     img_crop = img[0:400, 0:720]  # [ y1:y2 , x1:x2 ]
    #     return img_crop

    def cropImage(self,img,x1,y1,x2,y2):
        img_crop = img[y1:y2, x1:x2]  # [ y1:y2 , x1:x2 ]
        return img_crop
    def click_event(self,event, x, y, flags, params):
        if event == cv2.EVENT_LBUTTONDOWN:
            self.x1 = x
            self.y1 = y
            print(x, ' ', y)
            
        if event==cv2.EVENT_LBUTTONUP:
            print(x, ' ', y)
            cv2.destroyWindow("image")
            img = self.cropImage(self.img_changed,self.x1,self.y1,x,y)
            self.default = self.cropImage(self.default,self.x1,self.y1,x,y)
            self.img_changed = img
            self.setPhoto(self.img_changed)

    def cropActive(self):
        # img = self.cropImage(self.img_changed)
        # self.default = self.cropImage(self.default)
        # self.img_changed = img
        # self.setPhoto(self.img_changed)
        img = cv2.imread(self.fileName)
        # imgSeted = cv2.resize(img,(640, 640))
        cv2.imshow('image', img)
        cv2.setMouseCallback('image',self.click_event)
       


    #--------------------------------------------------crop -------------------------------------------------
    

    def resizeImage(self,img,w,h):
        new_width = int(w)  # 800
        new_height = int(h)  # 400
        img_resized = cv2.resize(img, dsize=(new_width, new_height))
        return img_resizedpy

    def resizeActive(self):
        dlg.show()  

    def inputSize(self,width,height):
        img = self.resizeImage(self.img_changed,width,height)
        self.default = self.resizeImage(self.default,width,height)
        self.img_changed = img
        self.setPhoto(self.img_changed)

    #--------------------------------------------------------resize ---------------------------------------------------
    def setPhoto(self, image):
        self.tmp = image
        image = imutils.resize(image,width = 550) #set lại chiều rộng cho ảnh
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB) # convert color từ image sang color_BGR2RGB
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0],QImage.Format_RGB888)
        self.label.setPixmap(QtGui.QPixmap.fromImage(image))
    #----------------------------------------setPhoto-------------------------------------------------------

    def brightness_value(self,value):
        self.bright_value_now = value
        if self.checkBright == 1:
            img = self.changeBrightness(self.default,self.bright_value_now)
            img = self.changeBlur(img,self.blur_value_now)

            self.img_changed = img
            self.setPhoto(img)
        
        
    def changeBrightness(self,img,value):
        hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
        h, s, v = cv2.split(hsv)
        lim = 255 - value
        v[v > lim] = 255
        v[v <= lim] += value
        final_hsv = cv2.merge((h, s, v))
        img = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)
        return img

        

    def blur_value(self,value):
        self.blur_value_now = value
        img = self.changeBlur(self.default,self.blur_value_now)
        if self.checkBright == 1:
            img = self.changeBrightness(img,self.bright_value_now)
        
        self.img_changed = img
        self.setPhoto(img)

    def changeBlur(self,img,value):
        kernel_size = (value + 1,value+1)
        img = cv2.blur(img,kernel_size)
        return img
    # 
    def defaultActive(self):
        self.setPhoto(self.setDefault)
        self.bright_value_now = 0   # Cập nhật giá trị độ sáng
        self.blur_value_now = 0   # Cập nhật giá trị độ mờ
        self.angle_value = 0  
        self.img_changed = self.image
        self.default = self.image
        self.setDefault = self.image
        self.checkBright =1
    

    def update(self,img):
        self.setPhoto(img)
        return img

    def savePhoto(self):
        filename = QFileDialog.getSaveFileName(filter="JPG(*.jpg);;PNG(*.png);;TIFF(*.tiff);;BMP(*.bmp)")[0]
        cv2.imwrite(filename,self.tmp)
        print('Image saved as:',filename)

#----------------------------------------name phim ------------------------------------------------------
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_2.setText(_translate("MainWindow", "Open"))
        self.pushButton.setText(_translate("MainWindow", "Save"))
        # self.pushButton_3.setText(_translate("MainWindow", "Resize"))
        # self.pushButton_4.setText(_translate("MainWindow", "Crop"))
        # self.pushButton_5.setText(_translate("MainWindow", "Turn left"))
        # self.pushButton_6.setText(_translate("MainWindow", "Turn right"))
        self.pushButton_7.setText(_translate("MainWindow", "Vẽ viền"))
        self.pushButton_8.setText(_translate("MainWindow", "Nhiễu"))
        # self.pushButton_9.setText(_translate("MainWindow", "Đen trắng"))
        self.pushButton_9.setText(_translate("MainWindow", "Phân ngưỡng"))
        # self.pushButton_10.setText(_translate("MainWindow", "Làm nét"))
        self.pushButton_10.setText(_translate("MainWindow", "Âm bản"))
        self.pushButton_11.setText(_translate("MainWindow", "Mặc định"))
        self.pushButton_12.setText(_translate("MainWindow", "Log"))
        self.pushButton_13.setText(_translate("MainWindow", "Biến đổi hàm mũ"))
        self.pushButton_14.setText(_translate("MainWindow", "Lọc trung vị"))
        self.pushButton_15.setText(_translate("MainWindow", "Lọc trung bình"))
        self.pushButton_16.setText(_translate("MainWindow", "Sobel"))
        self.pushButton_17.setText(_translate("MainWindow", "Canny"))
        self.pushButton_18.setText(_translate("MainWindow", "LOG"))
        self.pushButton_19.setText(_translate("MainWindow", "Phát triển vùng"))
        self.pushButton_20.setText(_translate("MainWindow", "Tách vùng"))
        

        # self.pushButton_11.setText(_translate("MainWindow", "Làm mờ"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    
    dlg = Dialog()
    
    # cv2.setMouseCallback('image',self.click_event)

	# wait for a key to be pressed to exit
	# cv2.waitKey(0)

	# close the window
	# cv2.destroyAllWindows()
    sys.exit(app.exec_())